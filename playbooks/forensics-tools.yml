---
- name: Install Forensic Tools on Forensics Server
  hosts: forensics
  become: yes
  vars:
    sleuthkit_version: "4.12.1"
  tasks:
    - name: Install system dependencies for forensic tools
      apt:
        name:
          - build-essential
          - autoconf
          - libtool
          - automake
          - git
          - wget
          - openjdk-8-jdk
          - testdisk
          - libewf-dev
          - zlib1g-dev
          - libafflib-dev
          - libssl-dev
          - python3-dev
          - python3-pip
          - python3-venv
          - libffi-dev
          - libjpeg-dev
          - yara
          - ssdeep
          - p7zip-full
          - postgresql-client
          - redis-tools
        state: present

    - name: Create forensics user
      user:
        name: forensics
        groups: docker
        shell: /bin/bash
        create_home: yes
        system: no

    - name: Create forensics directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: forensics
        group: forensics
      loop:
        - /opt/forensics
        - /opt/forensics/sleuthkit
        - /opt/forensics/autopsy
        - /opt/forensics/volatility3
        - /opt/forensics/scripts
        - /home/forensics/cases
        - /data/processed/autopsy
        - /data/processed/volatility
        - /data/processed/andriller

    - name: Download and compile Sleuth Kit
      shell: |
        cd /tmp
        wget https://github.com/sleuthkit/sleuthkit/releases/download/sleuthkit-{{ sleuthkit_version }}/sleuthkit-{{ sleuthkit_version }}.tar.gz
        tar -xzf sleuthkit-{{ sleuthkit_version }}.tar.gz
        cd sleuthkit-{{ sleuthkit_version }}
        ./configure --prefix=/opt/forensics/sleuthkit
        make -j$(nproc)
        make install
        echo "/opt/forensics/sleuthkit/lib" > /etc/ld.so.conf.d/sleuthkit.conf
        ldconfig
      args:
        creates: /opt/forensics/sleuthkit/bin/fls

    - name: Add Sleuth Kit to PATH
      lineinfile:
        path: /etc/environment
        line: 'PATH="/opt/forensics/sleuthkit/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"'
        regexp: '^PATH='

    - name: Install Volatility3
      shell: |
        cd /opt/forensics
        git clone https://github.com/volatilityfoundation/volatility3.git
        cd volatility3
        python3 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install .
        chown -R forensics:forensics /opt/forensics/volatility3
      args:
        creates: /opt/forensics/volatility3/venv

    - name: Install Andriller
      pip:
        name: andriller
        executable: pip3
        state: latest

    - name: Install YARA Python bindings
      pip:
        name: yara-python
        executable: pip3

    - name: Create Volatility wrapper script
      copy:
        content: |
          #!/bin/bash
          source /opt/forensics/volatility3/venv/bin/activate
          python3 /opt/forensics/volatility3/vol.py "$@"
        dest: /usr/local/bin/volatility3
        mode: '0755'

    - name: Remove any existing conflicting CAPE installations
      shell: |
        # Stop and remove any existing CAPE services
        systemctl stop cape || true
        systemctl disable cape || true
        rm -f /etc/systemd/system/cape.service
        # Remove existing installations
        rm -rf /opt/forensics/cape
        rm -rf /opt/CAPEv2
        rm -rf /home/cape/CAPEv2
        # Remove cape user if exists
        userdel -r cape || true
      ignore_errors: yes

    - name: Install KVM/QEMU and virtualization dependencies
      apt:
        name:
          - qemu-kvm
          - libvirt-daemon-system
          - libvirt-clients
          - bridge-utils
          - virtinst
          - acpica-tools
          - python3-libxml2
          - libxml2
          - libxml2-dev
          - libxslt1-dev
          - dbus-x11
        state: present

    - name: Install Poetry via pip
      pip:
        name: 
          - poetry
          - passlib
        executable: pip3
        state: present

    - name: Create cape user
      user:
        name: cape
        groups: 
          - libvirt
          - kvm
        shell: /bin/bash
        create_home: yes
        system: no

    - name: Set cape user password
      shell: echo 'cape:cape' | chpasswd

    - name: Clone CAPE Sandbox
      git:
        repo: https://github.com/kevoreilly/CAPEv2.git
        dest: /home/cape/CAPEv2
        version: master
      become_user: cape

    - name: Create acpiData directory and extract ACPI information
      shell: |
        cd /home/cape/CAPEv2/installer
        mkdir -p acpiData
        cd acpiData
        acpidump > acpidump.out
        acpixtract -a acpidump.out
        iasl -d dsdt.dat || true
        # Extract hardware ID for replacement
        if [ -f dsdt.dsl ]; then
          HARDWARE_ID=$(cat dsdt.dsl | grep "Hardware ID" | head -1 | awk '{print $NF}' | tr -d '"' || echo "PNP0")
        else
          HARDWARE_ID="PNP0"
        fi
        echo $HARDWARE_ID > /tmp/hardware_id.txt
        cd ..
        rm -rf acpiData
      args:
        creates: /tmp/hardware_id.txt

    - name: Read hardware ID
      slurp:
        src: /tmp/hardware_id.txt
      register: hardware_id_content

    - name: Set hardware ID variable
      set_fact:
        hardware_id: "{{ hardware_id_content.content | b64decode | trim | default('PNP0') }}"

    - name: Customize kvm-qemu.sh script
      replace:
        path: /home/cape/CAPEv2/installer/kvm-qemu.sh
        regexp: '<WOOT>'
        replace: "{{ hardware_id }}"

    - name: Customize cape2.sh script
      replace:
        path: /home/cape/CAPEv2/installer/cape2.sh
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      loop:
        - { regexp: 'NETWORK_IFACE', replace: 'virbr0' }
        - { regexp: 'IFACE_IP', replace: '192.168.122.1' }
        - { regexp: 'PASSWD', replace: 'cape' }

    - name: Copy CAPE to /opt
      copy:
        src: /home/cape/CAPEv2/
        dest: /opt/CAPEv2/
        remote_src: yes
        owner: cape
        group: cape
        mode: preserve

    - name: Install KVM/QEMU via CAPE script
      shell: |
        cd /opt/CAPEv2/installer
        ./kvm-qemu.sh all cape 2>&1 | tee /var/log/kvm-qemu-install.log
      args:
        creates: /var/log/kvm-qemu-install.log
      become_user: root
      environment:
        DEBIAN_FRONTEND: noninteractive

    - name: Install CAPE via installer script
      shell: |
        cd /opt/CAPEv2/installer
        ./cape2.sh all cape 2>&1 | tee /var/log/cape2-install.log
      args:
        creates: /var/log/cape2-install.log
      become_user: root
      environment:
        DEBIAN_FRONTEND: noninteractive

    - name: Configure CAPE KVM settings
      lineinfile:
        path: /opt/CAPEv2/conf/kvm.conf
        regexp: '^ip ='
        line: 'ip = 192.168.122.1'
        create: yes

    - name: Configure CAPE cuckoo settings
      lineinfile:
        path: /opt/CAPEv2/conf/cuckoo.conf
        regexp: '^ip ='
        line: 'ip = 192.168.122.1'
        create: yes

    - name: Install Poetry and update CAPE dependencies
      shell: |
        cd /opt/CAPEv2
        poetry install --no-dev
        poetry update
      become_user: cape
      ignore_errors: yes

    - name: Create libvirt images directory
      file:
        path: /var/lib/libvirt/images
        state: directory
        mode: '0755'

    - name: Set proper ownership for CAPE directories
      file:
        path: "{{ item }}"
        owner: cape
        group: cape
        recurse: yes
      loop:
        - /opt/CAPEv2
        - /home/cape/CAPEv2

    - name: Create CAPE service file
      copy:
        content: |
          [Unit]
          Description=CAPE Malware Analysis Sandbox
          After=network.target postgresql.service mongodb.service

          [Service]
          Type=simple
          User=cape
          WorkingDirectory=/opt/CAPEv2
          ExecStart=/usr/bin/python3 /opt/CAPEv2/cuckoo.py
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/cape.service
        mode: '0644'

    - name: Enable libvirtd service
      systemd:
        name: libvirtd
        enabled: yes
        state: started

    - name: Add cape user to libvirt group
      user:
        name: cape
        groups: libvirt,kvm
        append: yes

    - name: Create directory for processed CAPE data
      file:
        path: /data/processed/cape
        state: directory
        mode: '0755'
        owner: cape
        group: cape

    - name: Create forensics processing script
      copy:
        content: |
          #!/bin/bash
          # Forensics Lab Processing Script
          # Usage: ./process_evidence.sh <evidence_path> <case_id>
          
          EVIDENCE_PATH="$1"
          CASE_ID="$2"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          if [ -z "$EVIDENCE_PATH" ] || [ -z "$CASE_ID" ]; then
              echo "Usage: $0 <evidence_path> <case_id>"
              exit 1
          fi
          
          # Create case directory
          mkdir -p "/data/cases/$CASE_ID"
          
          echo "Starting forensics processing for case: $CASE_ID"
          echo "Evidence: $EVIDENCE_PATH"
          echo "Timestamp: $TIMESTAMP"
          
          # Run Volatility analysis if memory dump
          if [[ "$EVIDENCE_PATH" == *.mem ]] || [[ "$EVIDENCE_PATH" == *.vmem ]] || [[ "$EVIDENCE_PATH" == *.raw ]]; then
              echo "Detected memory dump, running Volatility analysis..."
              /usr/local/bin/volatility3 -f "$EVIDENCE_PATH" windows.info > "/data/processed/volatility/${CASE_ID}_${TIMESTAMP}_info.json"
              /usr/local/bin/volatility3 -f "$EVIDENCE_PATH" windows.pslist > "/data/processed/volatility/${CASE_ID}_${TIMESTAMP}_pslist.json"
          fi
          
          # Run Autopsy analysis for disk images
          if [[ "$EVIDENCE_PATH" == *.dd ]] || [[ "$EVIDENCE_PATH" == *.img ]] || [[ "$EVIDENCE_PATH" == *.e01 ]]; then
              echo "Detected disk image, running Autopsy analysis..."
              # Add autopsy command line processing here
          fi
          
          echo "Processing complete for case: $CASE_ID"
        dest: /opt/forensics/scripts/process_evidence.sh
        mode: '0755'
        owner: forensics
        group: forensics