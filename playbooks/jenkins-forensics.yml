---
# Jenkins Forensics Automation Engine Deployment
# This playbook deploys Jenkins with forensic-specific configuration
- name: Deploy Jenkins for Digital Forensics Automation
  hosts: management
  become: yes
  vars:
    jenkins_admin_user: "admin"
    jenkins_admin_password: "ForensicsLab2025!"
    jenkins_port: 8080
    jenkins_plugins:
      - workflow-aggregator
      - pipeline-stage-view
      - blueocean
      - git
      - github
      - slack
      - email-ext
      - build-timeout
      - timestamper
      - ws-cleanup
      - ant
      - gradle
      - pipeline-utility-steps
      - http_request
      - json-path
      - file-operations
      - copyartifact
      - parameterized-trigger
      - matrix-auth
      - ldap
      - role-strategy
      - audit-trail
      - jobConfigHistory
      - build-monitor-plugin
      - dashboard-view
    
  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install Java 11 (required for Jenkins)
      apt:
        name:
          - openjdk-11-jdk
          - curl
          - wget
          - gnupg2
          - software-properties-common
        state: present

    - name: Add Jenkins repository key
      apt_key:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io.key
        state: present

    - name: Add Jenkins repository
      apt_repository:
        repo: "deb https://pkg.jenkins.io/debian-stable binary/"
        state: present
        update_cache: yes

    - name: Install Jenkins
      apt:
        name: jenkins
        state: present

    - name: Create Jenkins directories for forensics
      file:
        path: "{{ item }}"
        state: directory
        owner: jenkins
        group: jenkins
        mode: '0755'
      loop:
        - /var/lib/jenkins/forensics
        - /var/lib/jenkins/forensics/evidence
        - /var/lib/jenkins/forensics/reports
        - /var/lib/jenkins/forensics/scripts
        - /var/lib/jenkins/forensics/pipelines
        - /var/lib/jenkins/forensics/templates

    - name: Configure Jenkins with increased memory
      lineinfile:
        path: /etc/default/jenkins
        regexp: '^JAVA_ARGS='
        line: 'JAVA_ARGS="-Djava.awt.headless=true -Xmx2048m -Xms1024m"'
        backup: yes

    - name: Configure Jenkins port
      lineinfile:
        path: /etc/default/jenkins
        regexp: '^HTTP_PORT='
        line: 'HTTP_PORT={{ jenkins_port }}'
        backup: yes

    - name: Start and enable Jenkins
      systemd:
        name: jenkins
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Wait for Jenkins to start
      wait_for:
        port: "{{ jenkins_port }}"
        host: localhost
        delay: 30
        timeout: 300

    - name: Create Jenkins automated setup script
      copy:
        content: |
          #!/bin/bash
          # Skip the initial setup wizard
          echo "2.479.1" > /var/lib/jenkins/jenkins.install.InstallUtil.lastExecVersion
          echo "2.479.1" > /var/lib/jenkins/jenkins.install.UpgradeWizard.state
          mkdir -p /var/lib/jenkins/plugins
          mkdir -p /var/lib/jenkins/init.groovy.d
          
          # Create Groovy script to setup admin user
          cat > /var/lib/jenkins/init.groovy.d/basic-security.groovy << 'EOF'
          #!groovy
          
          import jenkins.model.*
          import hudson.security.*
          import hudson.security.csrf.DefaultCrumbIssuer
          import jenkins.security.s2m.AdminWhitelistRule
          
          def instance = Jenkins.getInstance()
          
          // Create admin user
          def hudsonRealm = new HudsonPrivateSecurityRealm(false)
          hudsonRealm.createAccount("{{ jenkins_admin_user }}", "{{ jenkins_admin_password }}")
          instance.setSecurityRealm(hudsonRealm)
          
          // Set authorization strategy
          def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
          strategy.setDenyAnonymousReadAccess(true)
          instance.setAuthorizationStrategy(strategy)
          
          // Enable CSRF protection
          instance.setCrumbIssuer(new DefaultCrumbIssuer(true))
          
          // Save configuration
          instance.save()
          
          println "Forensics admin user created successfully"
          EOF
          
          # Create basic configuration with forensics customization
          cat > /var/lib/jenkins/config.xml << 'EOF'
          <?xml version='1.1' encoding='UTF-8'?>
          <hudson>
            <disabledAdministrativeMonitors/>
            <version>2.479.1</version>
            <installStateName>RUNNING</installStateName>
            <numExecutors>4</numExecutors>
            <mode>NORMAL</mode>
            <useSecurity>true</useSecurity>
            <disableRememberMe>false</disableRememberMe>
            <projectNamingStrategy class="jenkins.model.ProjectNamingStrategy$DefaultProjectNamingStrategy"/>
            <workspaceDir>${JENKINS_HOME}/workspace/${ITEM_FULLNAME}</workspaceDir>
            <buildsDir>${ITEM_ROOTDIR}/builds</buildsDir>
            <systemMessage>Digital Forensics Lab - Automated Evidence Processing Platform</systemMessage>
          </hudson>
          EOF
          
          # Set proper ownership
          chown -R jenkins:jenkins /var/lib/jenkins
        dest: /tmp/setup_jenkins_forensics.sh
        mode: '0755'

    - name: Setup Jenkins automated configuration
      shell: /tmp/setup_jenkins_forensics.sh

    - name: Get Jenkins initial admin password (for reference)
      slurp:
        src: /var/lib/jenkins/secrets/initialAdminPassword
      register: jenkins_initial_password

    - name: Display Jenkins initial setup information
      debug:
        msg: |
          Jenkins Forensics Lab is now running and accessible at:
          URL: http://{{ ansible_default_ipv4.address }}:{{ jenkins_port }}
          External URL: http://34.136.254.74:{{ jenkins_port }}
          
          AUTOMATED ADMIN USER CREATED:
          Username: {{ jenkins_admin_user }}
          Password: {{ jenkins_admin_password }}
          
          Original Initial Admin Password (for reference): {{ jenkins_initial_password.content | b64decode | trim }}
          
          Jenkins is ready to use! You can now:
          1. Open Jenkins in your browser at the URL above
          2. Login with the automated credentials shown above
          3. Start using the forensics automation pipelines
          
          Pipeline library and scripts are deployed and ready!

    - name: Create Jenkins CLI directory
      file:
        path: /var/lib/jenkins/cli
        state: directory
        owner: jenkins
        group: jenkins
        mode: '0755'

    - name: Check if Jenkins CLI already exists
      stat:
        path: /var/lib/jenkins/cli/jenkins-cli.jar
      register: jenkins_cli_exists

    - name: Download Jenkins CLI
      get_url:
        url: "http://localhost:8080/jnlpJars/jenkins-cli.jar"
        dest: /var/lib/jenkins/cli/jenkins-cli.jar
        owner: jenkins
        group: jenkins
        mode: '0644'
      when: not jenkins_cli_exists.stat.exists
      retries: 5
      delay: 10

    - name: Create forensics pipeline library directory
      file:
        path: /var/lib/jenkins/pipeline-library
        state: directory
        owner: jenkins
        group: jenkins
        mode: '0755'

    - name: Copy pipeline library files to Jenkins
      copy:
        src: "../jenkins-pipeline-library/"
        dest: /var/lib/jenkins/pipeline-library/
        owner: jenkins
        group: jenkins
        mode: '0644'
        directory_mode: '0755'

    - name: Copy Jenkinsfiles to Jenkins
      copy:
        src: "../jenkinsfiles/"
        dest: /var/lib/jenkins/forensics/pipelines/
        owner: jenkins
        group: jenkins
        mode: '0644'
        directory_mode: '0755'

    - name: Copy forensics scripts to Jenkins
      copy:
        src: "../files/forensics-scripts/"
        dest: /var/lib/jenkins/forensics/scripts/
        owner: jenkins
        group: jenkins
        mode: '0755'
        directory_mode: '0755'

    - name: Restart Jenkins to apply all configurations
      systemd:
        name: jenkins
        state: restarted

    - name: Wait for Jenkins to restart and be ready
      wait_for:
        port: "{{ jenkins_port }}"
        host: localhost
        delay: 30
        timeout: 300

    - name: Install additional system dependencies for forensics
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - git
          - unzip
          - p7zip-full
          - file
          - xxd
          - binutils
          - bsdmainutils
        state: present

    - name: Check if Python virtual environment already exists
      stat:
        path: /var/lib/jenkins/forensics/forensics-env/bin/activate
      register: venv_exists

    - name: Create Python virtual environment for forensics scripts
      shell: |
        cd /var/lib/jenkins/forensics
        python3 -m venv forensics-env
        source forensics-env/bin/activate
        pip install requests beautifulsoup4 lxml pandas numpy
      when: not venv_exists.stat.exists
      become_user: root

    - name: Configure Jenkins firewall rules
      ufw:
        rule: allow
        port: '8080'
        proto: tcp
        comment: 'Jenkins Web Interface'

    - name: Create Jenkins backup directory
      file:
        path: /backup/jenkins
        state: directory
        owner: jenkins
        group: jenkins
        mode: '0755'

    - name: Check if Jenkins maintenance script already exists
      stat:
        path: /usr/local/bin/jenkins-forensics-maintenance
      register: maintenance_script_exists

    - name: Create Jenkins maintenance script
      copy:
        content: |
          #!/bin/bash
          # Jenkins Forensics Lab Maintenance Script
          
          # Backup Jenkins configuration
          backup_jenkins() {
              echo "Backing up Jenkins configuration..."
              tar -czf /backup/jenkins/jenkins-config-$(date +%Y%m%d-%H%M%S).tar.gz \
                  -C /var/lib/jenkins \
                  --exclude=workspace \
                  --exclude=builds \
                  --exclude=logs \
                  .
              echo "Backup completed"
          }
          
          # Clean old builds and artifacts
          cleanup_jenkins() {
              echo "Cleaning up old Jenkins data..."
              find /var/lib/jenkins/workspace -type d -name "*" -mtime +7 -exec rm -rf {} + 2>/dev/null || true
              find /var/lib/jenkins/forensics/evidence -name "*.tmp" -mtime +1 -delete 2>/dev/null || true
              echo "Cleanup completed"
          }
          
          # Health check
          health_check() {
              echo "Performing Jenkins health check..."
              if curl -s http://localhost:8080/login >/dev/null; then
                  echo "Jenkins is responding"
              else
                  echo "Jenkins is not responding - attempting restart"
                  systemctl restart jenkins
              fi
          }
          
          case "$1" in
              backup)
                  backup_jenkins
                  ;;
              cleanup)
                  cleanup_jenkins
                  ;;
              health)
                  health_check
                  ;;
              *)
                  echo "Usage: $0 {backup|cleanup|health}"
                  exit 1
                  ;;
          esac
        dest: /usr/local/bin/jenkins-forensics-maintenance
        mode: '0755'
      when: not maintenance_script_exists.stat.exists

    - name: Create Jenkins maintenance cron job
      cron:
        name: "Jenkins forensics maintenance"
        minute: "0"
        hour: "2"
        job: "/usr/local/bin/jenkins-forensics-maintenance cleanup && /usr/local/bin/jenkins-forensics-maintenance backup"
        user: root
